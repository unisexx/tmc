<?php

namespace App\Http\Controllers\Backend;

use App\Http\Controllers\Controller;
use App\Models\User;
use Carbon\Carbon;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Hash;
use Illuminate\Support\Facades\Mail;
use Illuminate\Support\Facades\Storage;
use Illuminate\Support\Facades\Validator;
use Illuminate\Validation\Rule;
use Spatie\Permission\Models\Role;

class UserController extends Controller
{
    public function __construct()
    {
        // $this->middleware('permission:‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô-‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô-‡∏î‡∏π|‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô-‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô-‡πÄ‡∏û‡∏¥‡πà‡∏°|‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô-‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô-‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç|‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô-‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô-‡∏•‡∏ö', ['only' => ['index', 'show']]);
    }

    /* =========================================================================
    | 1) ‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
     * =========================================================================*/
    public function index(Request $request)
    {
        $q     = trim($request->get('q', ''));
        $users = User::query()
            ->with(['role', 'serviceUnits' => fn($q) => $q->withPivot('is_primary'), 'superviseProvince', 'superviseRegion'])
            ->whereNotNull('role_id')
            ->when($q !== '', function ($qr) use ($q) {
                $qr->where(function ($x) use ($q) {
                    $x->where('name', 'like', "%{$q}%")
                        ->orWhere('contact_name', 'like', "%{$q}%")
                        ->orWhere('email', 'like', "%{$q}%")
                        ->orWhere('username', 'like', "%{$q}%");
                });
            })
            ->latest('id')
            ->paginate(20)
            ->withQueryString();

        return view('backend.user.index', compact('users', 'q'));
    }

    /* =========================================================================
    | 2) ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
     * =========================================================================*/
    public function create()
    {
        return view('backend.user.create');
    }

    public function store(Request $request)
    {
        [$data, $pwdPlain] = $this->validatedPayload($request, null);

        // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
        $user = User::create($data);

        // ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå
        if ($request->filled('role_id')) {
            $role = Role::find($request->role_id);
            if ($role) {
                $user->assignRole($role->name);
            }
        }

        // ‡∏™‡πà‡∏á‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡πÅ‡∏à‡πâ‡∏á credential
        $this->notifyCredentials($user->email, $user->username, $pwdPlain);

        flash_notify('‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢', 'success');
        return redirect()->route('backend.user.index');
    }

    /* =========================================================================
    | 3) ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
     * =========================================================================*/
    public function edit(User $user)
    {
        return view('backend.user.edit', compact('user'));
    }

    public function update(Request $request, User $user)
    {
        [$data, $pwdPlain] = $this->validatedPayload($request, $user);

        $user->update($data);

        // ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå
        if ($request->filled('role_id')) {
            $role = Role::find($request->role_id);
            if ($role) {
                $user->syncRoles([$role->name]);
            }
        } else {
            $user->syncRoles([]);
        }

        // ‡∏ñ‡πâ‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô ‡∏Ñ‡πà‡∏≠‡∏¢‡πÄ‡∏õ‡∏¥‡∏î‡πÉ‡∏ä‡πâ‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î‡∏ô‡∏µ‡πâ
        // if ($pwdPlain) { $this->notifyCredentials($user->email, $user->username, $pwdPlain); }

        flash_notify('‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢', 'success');
        return redirect()->route('backend.user.index');
    }

    /* =========================================================================
    | 4) ‡∏•‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
     * =========================================================================*/
    public function destroy(User $user)
    {
        if ($user->officer_doc_path && Storage::disk('public')->exists($user->officer_doc_path)) {
            Storage::disk('public')->delete($user->officer_doc_path);
        }
        $user->delete();
        flash_notify('‡∏•‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢', 'success');
        return back();
    }

    /* =========================================================================
    | Helpers
     * =========================================================================*/

    /**
     * Validate + Normalize + Upload
     * ‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤: [$data ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å, $passwordPlain ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á/‡∏™‡∏∏‡πà‡∏°‡πÉ‡∏´‡πâ]
     */
    private function validatedPayload(Request $request, ?User $current): array
    {
        $rules = [
            // ‡∏ú‡∏π‡πâ‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô
            'contact_cid'           => ['required', 'regex:/^\d{13}$/', Rule::unique('users', 'contact_cid')->ignore($current?->id)],
            'contact_name'          => ['required', 'string', 'max:255'],
            'contact_position'      => ['required', 'string', 'max:255'],
            'contact_mobile'        => ['required', 'string', 'max:60'],
            'email'                 => ['required', 'email', 'max:255', Rule::unique('users', 'email')->ignore($current?->id)],

            // ‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡πÄ‡∏à‡πâ‡∏≤‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà
            'officer_doc'           => [$current ? 'sometimes' : 'required', 'file', 'mimes:pdf,jpg,jpeg,png', 'max:5120'],
            'remove_officer_doc'    => ['nullable', 'boolean'],

            // ‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
            'username'              => ['required', 'string', 'max:60', Rule::unique('users', 'username')->ignore($current?->id)],
            'password'              => [$current ? 'nullable' : 'required', 'string', 'min:8', 'confirmed'],
            'password_confirmation' => [$current ? 'nullable' : 'required', 'same:password', 'required_with:password'],

            // Role
            'role_id'               => ['required', 'integer', Rule::exists('roles', 'id')->where('guard_name', 'web')],

            // üîπ ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡∏û‡∏¥‡∏à‡∏≤‡∏£‡∏ì‡∏≤ (‡∏£‡∏±‡∏ö‡∏ó‡∏±‡πâ‡∏á‡πÑ‡∏ó‡∏¢/‡∏≠‡∏±‡∏á‡∏Å‡∏§‡∏©)
            'reg_status'            => ['nullable', 'string', Rule::in(['‡∏£‡∏≠‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö', '‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥', '‡πÑ‡∏°‡πà‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥'])],
        ];

        $messages = [
            'required'                            => '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å :attribute',
            'string'                              => ':attribute ‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°',
            'max'                                 => '‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏≤‡∏ß :attribute ‡∏ï‡πâ‡∏≠‡∏á‡πÑ‡∏°‡πà‡πÄ‡∏Å‡∏¥‡∏ô :max ‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£',
            'email'                               => '‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö :attribute ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á',
            'unique'                              => ':attribute ‡∏ô‡∏µ‡πâ‡∏ñ‡∏π‡∏Å‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÅ‡∏•‡πâ‡∏ß',
            'mimes'                               => ':attribute ‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏õ‡πá‡∏ô‡πÑ‡∏ü‡∏•‡πå‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó: :values',
            'max.file'                            => '‡∏Ç‡∏ô‡∏≤‡∏î‡πÑ‡∏ü‡∏•‡πå :attribute ‡∏ï‡πâ‡∏≠‡∏á‡πÑ‡∏°‡πà‡πÄ‡∏Å‡∏¥‡∏ô :max ‡∏Å‡∏¥‡πÇ‡∏•‡πÑ‡∏ö‡∏ï‡πå',
            'password.min'                        => '‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡πâ‡∏≠‡∏¢ :min ‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£',
            'password.confirmed'                  => '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÉ‡∏´‡πâ‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ô',
            'password_confirmation.same'          => '‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÑ‡∏°‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô',
            'password_confirmation.required_with' => '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô',
            'contact_cid.regex'                   => '‡πÄ‡∏•‡∏Ç‡∏ö‡∏±‡∏ï‡∏£‡∏õ‡∏£‡∏∞‡∏ä‡∏≤‡∏ä‡∏ô‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç 13 ‡∏´‡∏•‡∏±‡∏Å',
        ];

        $attributes = [
            'contact_cid'           => '‡πÄ‡∏•‡∏Ç‡∏ö‡∏±‡∏ï‡∏£‡∏õ‡∏£‡∏∞‡∏à‡∏≥‡∏ï‡∏±‡∏ß‡∏õ‡∏£‡∏∞‡∏ä‡∏≤‡∏ä‡∏ô',
            'contact_name'          => '‡∏ä‡∏∑‡πà‡∏≠-‡∏™‡∏Å‡∏∏‡∏•',
            'contact_position'      => '‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á',
            'contact_mobile'        => '‡πÇ‡∏ó‡∏£‡∏®‡∏±‡∏û‡∏ó‡πå‡∏°‡∏∑‡∏≠‡∏ñ‡∏∑‡∏≠',
            'email'                 => '‡∏≠‡∏µ‡πÄ‡∏°‡∏•',
            'officer_doc'           => '‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏à‡πâ‡∏≤‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà',
            'username'              => 'Username',
            'password'              => '‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô',
            'password_confirmation' => '‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô',
            'role_id'               => '‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô',
            'reg_status'            => '‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡∏û‡∏¥‡∏à‡∏≤‡∏£‡∏ì‡∏≤',
        ];

        $validator = Validator::make($request->all(), $rules, $messages, $attributes);

        // ‡∏ï‡∏£‡∏ß‡∏à checksum ‡∏ö‡∏±‡∏ï‡∏£‡∏õ‡∏£‡∏∞‡∏ä‡∏≤‡∏ä‡∏ô
        $validator->after(function ($v) use ($request) {
            $cid = preg_replace('/\D/', '', (string) $request->input('contact_cid'));
            if ($cid && !$this->isValidThaiCitizenId($cid)) {
                $v->errors()->add('contact_cid', '‡πÄ‡∏•‡∏Ç‡∏ö‡∏±‡∏ï‡∏£‡∏õ‡∏£‡∏∞‡∏ä‡∏≤‡∏ä‡∏ô‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á (‡πÄ‡∏ä‡πá‡∏Å‡∏ã‡∏±‡∏°‡πÑ‡∏°‡πà‡∏ú‡πà‡∏≤‡∏ô)');
            }
        });

        $data = $validator->validate();

        // Normalize
        $data['contact_cid'] = preg_replace('/\D/', '', (string) ($data['contact_cid'] ?? ''));
        $data['name']        = $data['contact_name'];

        // Password
        $passwordPlain = null;
        if (!$current) {
            $passwordPlain    = $data['password'];
            $data['password'] = Hash::make($data['password']);
        } else {
            if (!empty($data['password'])) {
                $passwordPlain    = $data['password'];
                $data['password'] = Hash::make($data['password']);
            } else {
                unset($data['password'], $data['password_confirmation']);
            }
        }

        // Upload / Remove officer_doc
        if ($request->boolean('remove_officer_doc') && $current) {
            if ($current->officer_doc_path && Storage::disk('public')->exists($current->officer_doc_path)) {
                Storage::disk('public')->delete($current->officer_doc_path);
            }
            $data['officer_doc_path']        = null;
            $data['officer_doc_verified_at'] = null;
            $data['officer_doc_verified_by'] = null;
        }
        if ($request->hasFile('officer_doc')) {
            $path                            = $request->file('officer_doc')->store('officer_docs', 'public');
            $data['officer_doc_path']        = $path;
            $data['officer_doc_verified_at'] = null;
            $data['officer_doc_verified_by'] = null;
        }

        /* üîπ ‡πÄ‡∏õ‡∏¥‡∏î/‡∏õ‡∏¥‡∏î‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥‡∏ï‡∏≤‡∏° reg_status (‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢) */
        $incomingStatus = $request->input('reg_status'); // ‡∏≠‡∏≤‡∏à‡πÄ‡∏õ‡πá‡∏ô null
        if ($incomingStatus !== null) {
            $data['reg_status'] = $incomingStatus;
            $data['is_active']  = $incomingStatus === '‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥' ? 1 : 0;
        } else {
            // ‡πÑ‡∏°‡πà‡∏°‡∏µ reg_status ‡πÄ‡∏Ç‡πâ‡∏≤‡∏°‡∏≤ ‚Üí ‡πÉ‡∏ä‡πâ‡∏Ñ‡πà‡∏≤‡πÄ‡∏î‡∏¥‡∏°‡∏ñ‡πâ‡∏≤‡∏°‡∏µ ‡πÑ‡∏°‡πà‡∏á‡∏±‡πâ‡∏ô default = 0
            $effectiveStatus   = $current?->reg_status;
            $data['is_active'] = $effectiveStatus === '‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥' ? 1 : 0;
        }

        // ‡πÄ‡∏Ñ‡∏•‡∏µ‡∏¢‡∏£‡πå‡∏ü‡∏¥‡∏•‡∏î‡πå‡∏ä‡∏±‡πà‡∏ß‡∏Ñ‡∏£‡∏≤‡∏ß
        unset($data['officer_doc'], $data['remove_officer_doc']);

        return [$data, $passwordPlain];
    }

    /**
     * ‡∏™‡πà‡∏á‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡πÅ‡∏à‡πâ‡∏á credential ‡πÅ‡∏ö‡∏ö‡∏á‡πà‡∏≤‡∏¢
     */
    private function notifyCredentials(string $email, string $username, ?string $passwordPlain): void
    {
        if (!$passwordPlain) {
            return;
        }

        try {
            Mail::raw(
                "‡∏£‡∏∞‡∏ö‡∏ö‡∏ú‡∏π‡πâ‡πÄ‡∏î‡∏¥‡∏ô‡∏ó‡∏≤‡∏á - ‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡∏ñ‡∏π‡∏Å‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏î‡∏¢‡∏ú‡∏π‡πâ‡∏î‡∏π‡πÅ‡∏•‡∏£‡∏∞‡∏ö‡∏ö\n\n" .
                "Username: {$username}\n" .
                "Password: {$passwordPlain}\n\n" .
                "‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡πÅ‡∏•‡πâ‡∏ß‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡∏ó‡∏±‡∏ô‡∏ó‡∏µ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢",
                function ($m) use ($email) {
                    $m->to($email)->subject('‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏ñ‡∏π‡∏Å‡∏™‡∏£‡πâ‡∏≤‡∏á (‡∏£‡∏∞‡∏ö‡∏ö‡∏ú‡∏π‡πâ‡πÄ‡∏î‡∏¥‡∏ô‡∏ó‡∏≤‡∏á)');
                }
            );
        } catch (\Throwable $e) {
            report($e);
        }
    }

    private function isValidThaiCitizenId(string $cid): bool
    {
        if (!preg_match('/^\d{13}$/', $cid)) {
            return false;
        }
        $sum = 0;
        for ($i = 0; $i < 12; $i++) {
            $sum += intval($cid[$i]) * (13 - $i);
        }
        $check = (11 - ($sum % 11)) % 10;
        return $check === intval($cid[12]);
    }
}
